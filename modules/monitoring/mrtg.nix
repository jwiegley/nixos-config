{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.mrtg-nagios;

  # MRTG configuration file for Nagios statistics
  # Adapted from Nagios Core sample-config/mrtg.cfg.in
  mrtgCfgFile = pkgs.writeText "mrtg-nagios.cfg" ''
    ###################################################################
    # MRTG Graphs: Nagios Statistics
    #
    # Graphing Nagios performance statistics using nagiostats utility.
    # Generated by NixOS configuration.
    ###################################################################

    # Global settings
    WorkDir: ${cfg.workDir}
    Language: english
    Options[_]: growright,bits
    WriteExpires: Yes
    Interval: 5
    RunAsDaemon: No

    # Service Latency and Execution Time
    Target[nagios-a]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=AVGACTSVCLAT,AVGACTSVCEXT,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-a]: 100000
    Title[nagios-a]: Average Service Check Latency and Execution Time
    PageTop[nagios-a]: <H1>Average Service Check Latency and Execution Time</H1>
    Options[nagios-a]: growright,gauge,nopercent
    YLegend[nagios-a]: Milliseconds
    ShortLegend[nagios-a]: &nbsp;
    LegendI[nagios-a]: &nbsp;Latency:
    LegendO[nagios-a]: &nbsp;Execution Time:
    Legend1[nagios-a]: Latency
    Legend2[nagios-a]: Execution Time
    Legend3[nagios-a]: Maximal 5 Minute Latency
    Legend4[nagios-a]: Maximal 5 Minute Execution Time

    # Service Percent State Change
    Target[nagios-b]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=AVGACTSVCPSC,AVGPSVSVCPSC,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-b]: 100
    Title[nagios-b]: Average Service State Change
    PageTop[nagios-b]: <H1>Average Service State Change</H1>
    Options[nagios-b]: growright,gauge,nopercent
    YLegend[nagios-b]: Percent
    ShortLegend[nagios-b]: &nbsp;
    LegendI[nagios-b]: &nbsp;Active Check % Change:
    LegendO[nagios-b]: &nbsp;Passive Check % Change:
    Legend1[nagios-b]: State Change
    Legend2[nagios-b]: State Change
    Legend3[nagios-b]: Maximal 5 Minute State Change
    Legend4[nagios-b]: Maximal 5 Minute State Change

    # Host Latency and Execution Time
    Target[nagios-c]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=AVGACTHSTLAT,AVGACTHSTEXT,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-c]: 100000
    Title[nagios-c]: Average Host Check Latency and Execution Time
    PageTop[nagios-c]: <H1>Average Host Check Latency and Execution Time</H1>
    Options[nagios-c]: growright,gauge,nopercent
    YLegend[nagios-c]: Milliseconds
    ShortLegend[nagios-c]: &nbsp;
    LegendI[nagios-c]: &nbsp;Latency:
    LegendO[nagios-c]: &nbsp;Execution Time:
    Legend1[nagios-c]: Latency
    Legend2[nagios-c]: Execution Time
    Legend3[nagios-c]: Maximal 5 Minute Latency
    Legend4[nagios-c]: Maximal 5 Minute Execution Time

    # Host Percent State Change
    Target[nagios-d]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=AVGACTHSTPSC,AVGPSVHSTPSC,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-d]: 100
    Title[nagios-d]: Average Host State Change
    PageTop[nagios-d]: <H1>Average Host State Change</H1>
    Options[nagios-d]: growright,gauge,nopercent
    YLegend[nagios-d]: Percent
    ShortLegend[nagios-d]: &nbsp;
    LegendI[nagios-d]: &nbsp;Active Check % Change:
    LegendO[nagios-d]: &nbsp;Passive Check % Change:
    Legend1[nagios-d]: State Change
    Legend2[nagios-d]: State Change
    Legend3[nagios-d]: Maximal 5 Minute State Change
    Legend4[nagios-d]: Maximal 5 Minute State Change

    # Hosts/Services Actively Checked
    Target[nagios-e]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMHSTACTCHK5M,NUMSVCACTCHK5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-e]: 7000
    Title[nagios-e]: Hosts/Services Actively Checked
    PageTop[nagios-e]: <H1>Hosts/Services Actively Checked</H1>
    Options[nagios-e]: growright,gauge,nopercent
    YLegend[nagios-e]: Total
    ShortLegend[nagios-e]: &nbsp;
    LegendI[nagios-e]: &nbsp;Hosts:
    LegendO[nagios-e]: &nbsp;Services:

    # Hosts/Services Passively Checked
    Target[nagios-f]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMHSTPSVCHK5M,NUMSVCPSVCHK5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-f]: 7000
    Title[nagios-f]: Hosts/Services Passively Checked
    PageTop[nagios-f]: <H1>Hosts/Services Passively Checked</H1>
    Options[nagios-f]: growright,gauge,nopercent
    YLegend[nagios-f]: Total
    ShortLegend[nagios-f]: &nbsp;
    LegendI[nagios-f]: &nbsp;Hosts:
    LegendO[nagios-f]: &nbsp;Services:

    # Service Problems (Critical/Unknown)
    Target[nagios-g]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMSVCCRIT,NUMSVCUNKN,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-g]: 500
    Title[nagios-g]: Service Problems (Critical and Unknown)
    PageTop[nagios-g]: <H1>Service Problems (Critical and Unknown)</H1>
    Options[nagios-g]: growright,gauge,nopercent
    YLegend[nagios-g]: Services
    ShortLegend[nagios-g]: &nbsp;
    LegendI[nagios-g]: &nbsp;Critical:
    LegendO[nagios-g]: &nbsp;Unknown:

    # Active Host Checks
    Target[nagios-i]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMSACTHSTCHECKS5M,NUMOACTHSTCHECKS5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-i]: 7000
    Title[nagios-i]: Active Host Checks
    PageTop[nagios-i]: <H1>Active Host Checks</H1>
    Options[nagios-i]: growright,gauge,nopercent
    YLegend[nagios-i]: Checks
    ShortLegend[nagios-i]: &nbsp;
    LegendI[nagios-i]: &nbsp;Scheduled Checks:
    LegendO[nagios-i]: &nbsp;On-Demand Checks:

    # Active Service Checks
    Target[nagios-j]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMSACTSVCCHECKS5M,NUMOACTSVCCHECKS5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-j]: 7000
    Title[nagios-j]: Active Service Checks
    PageTop[nagios-j]: <H1>Active Service Checks</H1>
    Options[nagios-j]: growright,gauge,nopercent
    YLegend[nagios-j]: Checks
    ShortLegend[nagios-j]: &nbsp;
    LegendI[nagios-j]: &nbsp;Scheduled Checks:
    LegendO[nagios-j]: &nbsp;On-Demand Checks:

    # Passive Host/Service Checks
    Target[nagios-k]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMPSVHSTCHECKS5M,NUMPSVSVCCHECKS5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-k]: 7000
    Title[nagios-k]: Passive Host/Service Checks
    PageTop[nagios-k]: <H1>Passive Host/Service Checks</H1>
    Options[nagios-k]: growright,gauge,nopercent
    YLegend[nagios-k]: Checks
    ShortLegend[nagios-k]: &nbsp;
    LegendI[nagios-k]: &nbsp;Host Checks:
    LegendO[nagios-k]: &nbsp;Service Checks:

    # Cached Host/Service Checks
    Target[nagios-l]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMCACHEDHSTCHECKS5M,NUMCACHEDSVCCHECKS5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-l]: 7000
    Title[nagios-l]: Cached Host/Service Checks
    PageTop[nagios-l]: <H1>Cached Host/Service Checks</H1>
    Options[nagios-l]: growright,gauge,nopercent
    YLegend[nagios-l]: Checks
    ShortLegend[nagios-l]: &nbsp;
    LegendI[nagios-l]: &nbsp;Host Checks:
    LegendO[nagios-l]: &nbsp;Service Checks:

    # External Commands
    Target[nagios-m]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMEXTCMDS5M,0,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-m]: 7000
    Title[nagios-m]: External Commands
    PageTop[nagios-m]: <H1>External Commands</H1>
    Options[nagios-m]: growright,gauge,nopercent
    YLegend[nagios-m]: Commands
    ShortLegend[nagios-m]: &nbsp;
    LegendI[nagios-m]: &nbsp;Commands:
    LegendO[nagios-m]: &nbsp;

    # Parallel/Serial Host Checks
    Target[nagios-n]: `${pkgs.nagios}/bin/nagiostats --config=/etc/nagios.cfg --mrtg --data=NUMPARHSTCHECKS5M,NUMSERHSTCHECKS5M,PROGRUNTIME,NAGIOSVERPID`
    MaxBytes[nagios-n]: 7000
    Title[nagios-n]: Parallel/Serial Host Checks
    PageTop[nagios-n]: <H1>Parallel/Serial Host Checks</H1>
    Options[nagios-n]: growright,gauge,nopercent
    YLegend[nagios-n]: Checks
    ShortLegend[nagios-n]: &nbsp;
    LegendI[nagios-n]: &nbsp;Parallel Checks:
    LegendO[nagios-n]: &nbsp;Serial Checks:
  '';

in
{
  options.services.mrtg-nagios = {
    enable = mkEnableOption "MRTG graphing for Nagios statistics";

    workDir = mkOption {
      type = types.path;
      default = "/var/lib/mrtg-nagios";
      description = "Directory where MRTG stores generated graphs and HTML files";
    };

    interval = mkOption {
      type = types.int;
      default = 5;
      description = "Interval in minutes between MRTG data collection runs";
    };

    user = mkOption {
      type = types.str;
      default = "mrtg";
      description = "User account under which MRTG runs";
    };

    group = mkOption {
      type = types.str;
      default = "mrtg";
      description = "Group for MRTG user";
    };
  };

  config = mkIf cfg.enable {
    # Install MRTG package
    environment.systemPackages = [ pkgs.mrtg ];

    # Create MRTG user and group
    users.users.${cfg.user} = {
      isSystemUser = true;
      group = cfg.group;
      description = "MRTG daemon user";
      home = cfg.workDir;
      # Grant MRTG user read access to Nagios status files
      extraGroups = [ "nagios" ];
    };

    users.groups.${cfg.group} = {};

    # Ensure MRTG work directory exists with proper permissions
    systemd.tmpfiles.rules = [
      "d ${cfg.workDir} 0755 ${cfg.user} ${cfg.group} -"
      "d ${cfg.workDir}/logs 0755 ${cfg.user} ${cfg.group} -"
    ];

    # Systemd service to run MRTG
    systemd.services.mrtg-nagios = {
      description = "MRTG Statistics Collection for Nagios";
      after = [ "nagios.service" "network.target" ];
      wants = [ "nagios.service" ];

      # Copy config to working directory before running MRTG
      # MRTG creates lock files next to the config file, which fails if config is in /nix/store
      preStart = ''
        cp ${mrtgCfgFile} ${cfg.workDir}/mrtg.cfg
        chmod 644 ${cfg.workDir}/mrtg.cfg
      '';

      # Generate index page after MRTG runs
      postStart = ''
        ${pkgs.mrtg}/bin/indexmaker \
          --title="Nagios Performance Statistics" \
          --subtitle="MRTG Monitoring Dashboard" \
          --output=${cfg.workDir}/index.html \
          ${cfg.workDir}/mrtg.cfg
      '';

      serviceConfig = {
        Type = "oneshot";
        User = cfg.user;
        Group = cfg.group;
        ExecStart = "${pkgs.mrtg}/bin/mrtg ${cfg.workDir}/mrtg.cfg";
        WorkingDirectory = cfg.workDir;

        # MRTG requires LANG=C to avoid UTF-8 errors
        Environment = "LANG=C";

        # Security hardening
        PrivateTmp = true;
        NoNewPrivileges = true;
        ProtectSystem = "strict";
        ProtectHome = true;
        ReadWritePaths = [ cfg.workDir ];
        ReadOnlyPaths = [ "/var/lib/nagios" "/etc/nagios.cfg" ];
      };
    };

    # Systemd timer to run MRTG periodically
    systemd.timers.mrtg-nagios = {
      description = "Timer for MRTG Nagios Statistics Collection";
      wantedBy = [ "timers.target" ];

      timerConfig = {
        OnBootSec = "5min";
        OnUnitActiveSec = "${toString cfg.interval}min";
        AccuracySec = "1min";
        Persistent = true;
      };
    };

    # Nginx reverse proxy for MRTG web interface
    services.nginx.virtualHosts."mrtg.vulcan.lan" = {
      forceSSL = true;
      sslCertificate = "/var/lib/nginx-certs/mrtg.vulcan.lan.crt";
      sslCertificateKey = "/var/lib/nginx-certs/mrtg.vulcan.lan.key";

      locations."/" = {
        root = cfg.workDir;
        index = "index.html";
        extraConfig = ''
          # Allow directory listing for easy navigation
          autoindex on;
          autoindex_exact_size off;
          autoindex_localtime on;

          # Serve PNG images
          location ~* \.png$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
          }

          # Serve HTML files
          location ~* \.html$ {
            expires 1m;
            add_header Cache-Control "public, must-revalidate";
          }
        '';
      };
    };

    # Certificate generation for MRTG web interface
    systemd.services.mrtg-certificate = {
      description = "Generate MRTG TLS certificate";
      wantedBy = [ "nginx.service" ];
      before = [ "nginx.service" ];
      after = [ "step-ca.service" ];
      path = [ pkgs.openssl pkgs.step-cli ];

      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        User = "root";
      };

      script = ''
        CERT_DIR="/var/lib/nginx-certs"
        mkdir -p "$CERT_DIR"

        CERT_FILE="$CERT_DIR/mrtg.vulcan.lan.crt"
        KEY_FILE="$CERT_DIR/mrtg.vulcan.lan.key"

        # Check if certificate already exists and is valid
        if [ -f "$CERT_FILE" ] && [ -f "$KEY_FILE" ]; then
          # Check if certificate is still valid for at least 30 days
          if ${pkgs.openssl}/bin/openssl x509 -in "$CERT_FILE" -noout -checkend 2592000; then
            echo "Certificate is still valid for more than 30 days"
            exit 0
          fi
        fi

        # Create self-signed certificate as fallback
        # User should generate proper certificate using step-ca or renew-certificate.sh
        echo "Creating temporary self-signed certificate for mrtg.vulcan.lan"
        echo "Please generate a proper certificate using:"
        echo "  sudo /etc/nixos/certs/renew-certificate.sh mrtg.vulcan.lan \\"
        echo "    -o /var/lib/nginx-certs -d 365 --owner nginx:nginx --cert-perms 644 --key-perms 600"

        ${pkgs.openssl}/bin/openssl req -x509 -newkey rsa:2048 \
          -keyout "$KEY_FILE" \
          -out "$CERT_FILE" \
          -days 365 \
          -nodes \
          -subj "/CN=mrtg.vulcan.lan" \
          -addext "subjectAltName=DNS:mrtg.vulcan.lan"

        # Set proper permissions
        chmod 644 "$CERT_FILE"
        chmod 600 "$KEY_FILE"
        chown -R nginx:nginx "$CERT_DIR"

        echo "Certificate generated successfully"
      '';
    };
  };
}
