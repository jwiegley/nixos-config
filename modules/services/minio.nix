{ config, lib, pkgs, ... }:

{
  services.minio = {
    enable = true;
    package = pkgs.minio;

    # Data directory
    dataDir = [ "/var/lib/minio/data" ];

    # Listen addresses
    listenAddress = "10.88.0.1:9000";
    consoleAddress = "10.88.0.1:9001";

    # Root credentials from SOPS (generated by minio-credentials-setup service)
    rootCredentialsFile = "/run/minio/credentials";
  };

  # Enhanced restart behavior for MinIO resilience
  systemd.services.minio = {
    serviceConfig = {
      Restart = "always";
      RestartSec = "10s";
      StartLimitIntervalSec = "300";
      StartLimitBurst = "5";
    };
  };

  # SOPS secrets for MinIO root credentials
  sops.secrets."minio-root-user" = {
    sopsFile = ../../secrets.yaml;
    owner = "root";
    group = "root";
    mode = "0400";
  };

  sops.secrets."minio-root-password" = {
    sopsFile = ../../secrets.yaml;
    owner = "root";
    group = "root";
    mode = "0400";
  };

  # Create combined credentials file for MinIO
  systemd.services.minio-credentials-setup = {
    description = "Generate MinIO credentials file from SOPS secrets";
    after = [ "sops-nix.service" ];
    wants = [ "sops-nix.service" ];
    before = [ "minio.service" ];
    wantedBy = [ "multi-user.target" ];

    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      User = "root";
    };

    script = ''
      mkdir -p /run/minio
      cat > /run/minio/credentials <<EOF
MINIO_ROOT_USER=$(cat ${config.sops.secrets."minio-root-user".path})
MINIO_ROOT_PASSWORD=$(cat ${config.sops.secrets."minio-root-password".path})
EOF
      chmod 400 /run/minio/credentials
      chown minio:minio /run/minio/credentials
    '';
  };

  # Create MinIO client configuration and RAGFlow bucket on startup
  systemd.services.minio-ragflow-setup = {
    description = "Create RAGFlow bucket in MinIO";
    after = [ "minio.service" "minio-credentials-setup.service" ];
    wants = [ "minio.service" ];
    requires = [ "minio-credentials-setup.service" ];
    wantedBy = [ "multi-user.target" ];

    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      User = "minio";
      Group = "minio";
    };

    path = [ pkgs.minio-client ];

    script = ''
      # Wait for MinIO to be ready
      until ${pkgs.curl}/bin/curl -s http://10.88.0.1:9000/minio/health/live > /dev/null 2>&1; do
        echo "Waiting for MinIO to be ready..."
        sleep 2
      done

      # Source credentials
      source /run/minio/credentials

      # Configure mc client
      ${pkgs.minio-client}/bin/mc alias set ragflow-local http://10.88.0.1:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD" --api S3v4

      # Create ragflow bucket if it doesn't exist
      if ! ${pkgs.minio-client}/bin/mc ls ragflow-local/ragflow > /dev/null 2>&1; then
        echo "Creating ragflow bucket..."
        ${pkgs.minio-client}/bin/mc mb ragflow-local/ragflow
        # Set bucket policy to private
        ${pkgs.minio-client}/bin/mc anonymous set none ragflow-local/ragflow
        echo "RAGFlow bucket created successfully"
      else
        echo "RAGFlow bucket already exists"
      fi
    '';
  };

  # Firewall rules for podman network
  networking.firewall.interfaces.podman0.allowedTCPPorts =
    lib.mkIf config.services.minio.enable [ 9000 9001 ];

  # Ensure data and runtime directories exist with correct permissions
  systemd.tmpfiles.rules = [
    "d /var/lib/minio/data 0750 minio minio -"
    "d /run/minio 0750 root root -"
  ];
}
